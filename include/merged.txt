// File: excecutor.h
void unset_variable(char ***env, char *args);
void execute_command(t_linked_list *parsed_list);

#endif


// File: execute_pipeline.h
/* ************************************************************************** */

#ifndef EXECUTOR_H
# define EXECUTOR_H

# define NON_COMMAND 127
# define NO_PERMISSION 126

// cmd_execute_main.c
int		parent_process_wait(t_cmd_invoke *head);
void	cmd_execute_first_last(t_cmd_invoke *node);
void	cmd_execute_first(t_cmd_invoke *node);
void	cmd_execute_last(t_cmd_invoke *node);
void	cmd_execute_middle(t_cmd_invoke *node);
int		cmd_execute_main(t_cmd_invoke *head);

// cmd_execute_utils.c
void	perror_exit(char *str, char **str_array1, char **str_array2,
			int exit_status);

// free.c
void	free2dim(char **str_array);

// get_path.c
char	*get_path_cmd(char *path_env, char **cmd);
char	*get_path_cmd_part(char **dir_array, char **cmd, char *tmp_str);
char	*get_path_cmd_not_find_path(char **cmd);
char	*get_path_main(t_cmd_invoke *node);

// get_path_utils.c
int		is_access(char *full_path);
bool	is_full_relative_path(char *str);

#endif


// File: history.h
/* ************************************************************************** */

#ifndef HISTORY_H
#define HISTORY_H

// 履歴関連の定数定義
#define HISTORY_FILE ".minishell_history"
#define BUFFER_SIZE 1024
#define MAX_HISTORY 100

// 履歴管理用構造体
typedef struct {
    char **entries;
    int count;
    int max_size;
} History;

// 履歴管理関数のプロトタイプ宣言
History *init_history(int max_size);
void add_to_history(History *history, const char *line);
void save_history_to_file(const char *filename, History *history);
void load_history_from_file(const char *filename, History *history);
void free_history(History *history);

#endif /* HISTORY_H */




// File: minishell.h
/* ************************************************************************** */

#ifndef MINISHELL_H
#define MINISHELL_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <readline/readline.h>
#include <readline/history.h>
#include "history.h"  // history.h をインクルード
#include "parser.h"
#include "execute_pipeline.h"
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <stdbool.h>
#include "../libft/libft.h"

#endif /* MINISHELL_H */



// File: parser.h
/* ************************************************************************** */

/* ************************************************************************** */

#ifndef PARSER_H
# define PARSER_H

// TokenTypeの定義（必要な場合）
typedef enum e_token_type
{
    TYPE_COMMAND,
    TYPE_PIPE,
    TYPE_REDIRECT_IN,
    TYPE_REDIRECT_OUT,
    TYPE_HEREDOC,
    TYPE_REDIRECT_APPEND,
    TYPE_DEFAULT
}   TokenType;

// リスト構造体の定義
typedef struct s_linked_list
{
    char            *content;
    TokenType       token_type;
    struct s_linked_list *next;
}   t_linked_list;

typedef struct s_redirect
{
	char				*filename;
	TokenType			redirect_type;
	struct s_redirect	*next;
}						t_redirect;

typedef struct s_cmd_invoke
{
	char				*cmd;
	char				**cmd_list;
	t_redirect			*redirect_in_head;
	t_redirect			*redirect_out_head;
	struct s_cmd_invoke	*next;
	pid_t				pid;
	int					*bef_pipefd;
	int					nxt_pipefd[2];
	int					in_fd;
	int					out_fd;
}						t_cmd_invoke;

// 関数プロトタイプ

// expansion.c
bool    is_name_character(char c);
char    *get_env_str(char *str, size_t *len);
char    *replace_to_env_val(char *str, char *env_str);
char    *expansion(char *str);

// linked_list.c
void    linked_list_print(t_linked_list *list_head);
void    linked_list_print_with_token(t_linked_list *list_head);
void    linked_list_free(t_linked_list *list_head);
void    linked_list_append(t_linked_list *list_head, char *str);
t_linked_list    *linked_list_init(t_linked_list *new_node);

// parser.c
t_linked_list    remove_quotes_from_tokens(t_linked_list *list_head);
void    expand_env_variables_in_list(t_linked_list *list_head);
t_linked_list    *parser(char *input);

// remove_quote.c
size_t  remove_quote_get_newlen(char *str);
char    *remove_quote(char *str);

// tokenize.c
TokenType   get_token_type(char *str);
void        assign_token_types(t_linked_list *list_head);
int         is_delimeter(char *str);
size_t      split_len(char *input);
void        tokenize_input(t_linked_list *head, char *input);

// utils.c
char    *strdup_len(char *str, size_t n);
bool    is_blank(char c);
void    ft_strcpy(char *dst, char *src);

// make_cmd.c
size_t	ft_cmd_len_list(t_cmd_invoke *head);
t_redirect		*redirect_init(t_redirect *new_node);
t_cmd_invoke	*cmd_invoke_init(t_cmd_invoke *new_node);
size_t			ft_cmd_len(t_linked_list *node);
t_redirect		*redirect_append(t_redirect *redirect_head, char *content,
					TokenType token_type);
t_cmd_invoke	*make_cmd(t_linked_list *list_head, t_cmd_invoke *cmd_head);


#endif
/* ************************************************************************** */



